# Dockerfile pour l'orchestrateur NLP
FROM python:3.10-slim

# M√©tadonn√©es
LABEL maintainer="NLP Platform Team"
LABEL description="Orchestrateur NLP avec FastAPI pour Mistral/TorchServe"
LABEL version="1.0.0"

# Variables d'environnement
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# R√©pertoire de travail
WORKDIR /app

# Installation des d√©pendances syst√®me
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copie des fichiers de requirements
COPY requirements.txt .

# Installation des d√©pendances Python
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Copie du code source
COPY orchestration_client.py .
COPY api_server.py .
COPY config/ ./config/

# Cr√©ation des r√©pertoires n√©cessaires
RUN mkdir -p /app/logs /app/cache /app/models

# Script de d√©marrage
COPY <<EOF /app/entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ D√©marrage de l'orchestrateur NLP"

# Attente de TorchServe
echo "‚è≥ Attente de TorchServe..."
while ! curl -f http://\${TORCHSERVE_URL:-localhost:8080}/ping >/dev/null 2>&1; do
    echo "Attente de TorchServe..."
    sleep 5
done

echo "‚úÖ TorchServe disponible"

# V√©rification des mod√®les
echo "üîç V√©rification des mod√®les..."
curl -s http://\${TORCHSERVE_URL:-localhost:8080}/models || echo "Aucun mod√®le trouv√©"

# D√©marrage de l'API
echo "üåê D√©marrage du serveur FastAPI..."
exec python api_server.py
EOF

RUN chmod +x /app/entrypoint.sh

# Exposition des ports
EXPOSE 8000 8001

# V√©rification de sant√©
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Point d'entr√©e
ENTRYPOINT ["/app/entrypoint.sh"]