version: '3.8'

services:
  # Service TorchServe principal
  torchserve:
    image: pytorch/torchserve:latest-gpu
    container_name: mistral-torchserve
    ports:
      - "8080:8080"  # API d'inférence
      - "8081:8081"  # API de gestion
      - "8082:8082"  # Métriques
      - "7070:7070"  # gRPC inférence
      - "7071:7071"  # gRPC gestion
    volumes:
      - ./torchserve/model-store:/home/model-server/model-store
      - ./torchserve/config.properties:/home/model-server/config.properties
      - ./torchserve/custom_handler.py:/home/model-server/custom_handler.py
      - ./logs:/home/model-server/logs
    environment:
      - TORCH_SERVE_CONFIG_FILE=/home/model-server/config.properties
      - CUDA_VISIBLE_DEVICES=0
      - OMP_NUM_THREADS=8
    command: >
      torchserve 
      --start 
      --model-store /home/model-server/model-store 
      --ts-config /home/model-server/config.properties
      --foreground
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Service d'orchestration NLP
  nlp-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    container_name: nlp-orchestrator
    ports:
      - "8000:8000"  # API REST
      - "8001:8001"  # Monitoring
    depends_on:
      torchserve:
        condition: service_healthy
    environment:
      - TORCHSERVE_URL=http://torchserve:8080
      - LOG_LEVEL=INFO
      - CACHE_SIZE=1000
      - MAX_WORKERS=10
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Service de monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: nlp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Dashboard Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: nlp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Redis pour cache distribué (optionnel)
  redis:
    image: redis:7-alpine
    container_name: nlp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16